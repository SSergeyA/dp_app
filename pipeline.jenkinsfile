def gitTag = null
pipeline {
    agent {
        kubernetes {
            yaml """
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: helm-cli
    image: alpine/helm
    command:
    - cat
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: sergey-local
          items:
            - key: .dockerconfigjson
              path: config.json
"""
        }
    }

    stages {
        // Удалить если pipeline script from SCM
       // stage('GIT') {
       //     steps {
       //         git branch: 'EDIT', url: 'https://github.com/SSergeyA/dp_app'
       //     }
       // }

        stage('BUILD') {
            steps {
                container(name: 'kaniko') {
                     script {
                        gitTag = sh(returnStdout: true, script: "git tag --contains | head -1").trim()
                        sh "echo $gitTag"
                        sh "echo ${env.TAG_NAME}"
                        sh "cat README.md"
                        sh "ls -l"
                     }   
//                  script {
//                    if (env.TAG_NAME) {
//                      sh ''' 
///kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=ssergeya/dp_app:nginx${env.TAG_NAME}
//                        '''
//                    } else {
//                      sh ''' 
///kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=ssergeya/dp_app:nginx$BUILD_NUMBER
//                         '''
//                    } 
//                 }   
                }
            }
        }

      //  stage('DEPLOY') {
      //      steps {
      //        kubernetesDeploy configs: 'deployment.yaml', kubeConfig: [path: ''], kubeconfigId: 'cube-conf-admin', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
      //      }
      //  }
    }
}
